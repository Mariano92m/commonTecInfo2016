(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: '/'"
p3
sS'layer'
p4
S'C:\\web2py\\applications\\Chuwal\\controllers/chuGame.py'
p5
sS'code'
p6
S'from gluon.serializers import loads_json\nimport random\n#HTML\n#///////////////////////////////////////////////////////////////////////////////////////////////#\ndef chuMap():\n    if session.nickname!=\'\':\n        return dict()\n    else:\n        redirect(URL(\'chuInterface\',\'chuRegister\'))\n\n#///////////////////////////////////////////////////////////////////////////////////////////////#\ndef chuSculptInfo():\n    if session.nickname!=\'\':\n        idNum= getId(URL(args=request.args, vars=request.get_vars, host=True))\n        sculp= db.sculpture(idNum)\n        return dict(sculp=sculp)\n    else:\n        redirect(URL(\'chuInterface\',\'chuRegister\'))\n    \n\n#///////////////////////////////////////////////////////////////////////////////////////////////#\n#Controladores para la Lista\ndef chuList():\n    if session.nickname!=\'\':\n        #en rows almaceno todos los registros de sculpture cuya ID sea mayor a cero\n        places=db().select(db.place.ALL,orderby=db.place.id)\n\n        #Usuario actual\n        userId=db(db.cazador.nickname==session.nickname).select(db.cazador.id)\n        uEst=db(db.sculpturEstado.cazador_id == userId[0].id).select(db.sculpturEstado.pId)\n\n        return dict(places=places, uEst=uEst)\n    else:\n        redirect(URL(\'chuInterface\',\'chuRegister\'))\n\n#///////////////////////////////////////////////////////////////////////////////////////////////#\ndef chuHunt():\n    if session.nickname!=\'\':\n        idNum= getId(URL(args=request.args, vars=request.get_vars, host=True))\n        sculp= db.sculpture(idNum)\n        mc,p=mulChoice()\n        return dict(sculp=sculp, mc=mc, p=p)\n    else:\n        redirect(URL(\'chuInterface\',\'chuRegister\'))\n\n#///////////////////////////////////////////////////////////////////////////////////////////////#\ndef chuHuntCorrecta():\n    return dict()\n#///////////////////////////////////////////////////////////////////////////////////////////////#\ndef chuHuntIncorrecta():\n    return dict()\n\n#///////////////////////////////////////////////////////////////////////////////////////////////#\n#Controladores para el Mapa\n@cache.action()\ndef download():\n    return response.download(request, db)\n\n#///////////////////////////////////////////////////////////////////////////////////////////////#\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n#///////////////////////////////////////////////////////////////////////////////////////////////#\ndef getId(url):\n    cont=0\n    cn=0\n    for i in url:\n        if (i==\'=\'):\n            cn=cont\n        cont=cont+1\n    numId=url[cn+1: len(url)]\n    return numId\n\ndef divide(dato):\n    for i in dato:\n        if(i==dato[0]):\n            dato1=i\n        if(i==dato[1]):\n            dato2=i\n    return dato1, dato2\n\ndef respuesta():\n    dato=URL(args=request.args)\n    s,d=divide(dato)\n    r=correcto(s,d)\n    if r == True:\n        redirect(URL(\'chuGame\',\'chuHuntCorrecta\'))\n    else:\n        redirect(URL(\'chuGame\',\'chuHuntIncorrecta\'))\n    \n\ndef correcto(s,d):\n    i=db(db.sculpture.id == s).select()\n    f=False\n    if (d==i.title):\n        f=True\n    elif (d==i.author):\n        f=True\n    elif (d==i.material):\n        f=True\n    elif (d==i.country):\n        f=True\n    elif (d==i.yearCreate):\n        f=True\n\n    return f\n\n#def correcto():\n#    if session.op1 == (db(db.sculpture.id == setIDFromURL()).select())[0].\n\n#///////////////////////////////////////////////////////////////////////////////////////////////#\n#Cambia el color del marcador dependiendo si esta cazada o no\ndef setMarkerColor(cazada):\n    if(cazada==\'S\'):\n        return "\\Chuwal\\static\\images\\PinVerde.png"\n    else:\n        return "\\Chuwal\\static\\images\\PinRojo.png"\n\n#///////////////////////////////////////////////////////////////////////////////////////////////#\n#Muestra una imagen dependiendo si esta cazada o no\ndef showIMG(condition, imgC):\n    if(imgC!="none"):\n        if(condition==\'S\'):\n            ima= \'"\' + imgC + \'"\';\n        else:\n            ima= \'"\' + imgC + \'"\';\n    else:\n        ima ="https://media.giphy.com/media/pSpmpxFxFwDpC/giphy.gif"\n    return ima\n\n#///////////////////////////////////////////////////////////////////////////////////////////////#\n#Muestra un boton dependiendo si esta cazada o no\ndef showBut(condition, imgC, sc):\n    if(imgC!="none"):\n        if(condition==\'S\'):\n            but=\'<a href="chuSculptInfo.html?args=\'+str(sc)+\'" class="btn">Ver info</a>\'\n        else:\n            but=\'<a href="chuHunt.html?args=\'+str(sc)+\'" class="btn">Cazar</a>\'\n    else:\n        but=\'<a href="#" class="btn">Error</a>\';\n    return but\n\n#///////////////////////////////////////////////////////////////////////////////////////////////#\n#Marcadores\ndef getMarkers():\n    places = []\n\n    #Usuario actual\n    userId=db(db.cazador.nickname==session.nickname).select(db.cazador.id)\n    uEst=db(db.sculpturEstado.cazador_id == userId[0].id).select(db.sculpturEstado.pId)\n    \n\n    #Places\n    rows = db(db.place.id >0 ).select()\n\n    for row in rows:\n        ima=row.sculpture_id.fileImageNHURL\n        idS=row.sculpture_id\n        lat=row.lat\n        lng=row.lng\n        name=row.name\n\n        #Compara la id de palce con la id que deberia almacenarse en pId\n        if row.id == uEst:\n            condition=\'S\'\n            pla=mark(condition, ima, idS, lat, lng, name)\n            places.append(pla)\n\n        #Si no son iguales muestra no cazada\n        elif row.id != uEst:\n            condition=\'N\'\n            pla=mark(condition, ima, idS, lat, lng, name)\n            places.append(pla)\n\n    return response.json(places)\n\ndef mark(condition, ima, idS, lat, lng, name):\n    #Color del marcador\n    x=setMarkerColor(condition)\n    #Imagen de la escultura\n    imagen= showIMG(condition, ima)\n    #Boton\n    but= showBut(condition, ima, idS)\n    #Codigo html va en este sector\n    html =  (\n            \'<div class="container" style="width: 200px;">\'\n                \'<center>\'\'<img src=\' + imagen + \' style="width: 100%;"/>\'\'</center>\'\n                \'<center>\'\'<button>\'+ but +\'</button>\'\'</center>\'\n            \'</div>\'\n            )\n    #Setea la informacion de los marcadores\n    place = {\n        \'lat\' : lat,\n        \'lng\' : lng,\n        \'name\' : name,\n        \'cazada\' : condition,\n        \'icon\': x,\n        \'infoWindow\' : {\n            \'content\' : html,\n            \'maxWidth\' : 200\n        },\n        \'onClick\':{}\n    }\n    return place\n\n#///////////////////////////////////////////////////////////////////////////////////////////////#\n#Reorganiza la lista de opciones que se van a mostrar               #Done\ndef randOrd(eList):\n    random.shuffle(eList)\n    return (eList)\n\n#///////////////////////////////////////////////////////////////////////////////////////////////#\n#Elige una opcion de manera aleatoria                               #Done\n\ndef randQ(arg):\n    sculp=setIDFromURL()\n\n    switcher = {\n        0: mulChoT(sculp.title), #Name\n        1: mulChoM(sculp.material),#Material\n        2: mulChoY(sculp.yearCreate),#Year\n        3: mulChoC(sculp.country),#Country\n        4: mulChoA(sculp.author) #Author\n    }\n    sw = {\n        0:"\xc2\xbfCual es el nombre de a escultura?",\n        1:"\xc2\xbfDe que material esta hecha la escultura?",\n        2:"\xc2\xbfEn que a\xc3\xb1o fue creada?",\n        3:"\xc2\xbfDe que pais es/son el/los autor/es de la escultura?",\n        4:"\xc2\xbfComo se llama el/los autor/es de la escultura?"\n    }\n    func= switcher.get(arg, "Error")\n    p= sw.get(arg,"Error")\n    return func, p\n\n#Random argument\ndef arg():\n    arg=random.randrange(0,5)\n    return arg\n\n#///////////////////////////////////////////////////////////////////////////////////////////////#\n#Setea la id de la escultura                                        #Done\ndef setIDFromURL():\n    idNum= getId(URL(args=request.args, vars=request.get_vars, host=True))\n    sculp= db.sculpture(idNum)\n    return sculp\n\n#///////////////////////////////////////////////////////////////////////////////////////////////#\n#Pregunta si existe un elemento en la lista                         #Done\ndef existe(lista, elemento):\n    for i in lista:\n        if(i==elemento):\n            return True\n    return False\n\n#///////////////////////////////////////////////////////////////////////////////////////////////#\n#Crea el multiple choice y lo reordena                              #Done\ndef mulChoice():\n    m,p=randQ(arg())\n    m=randOrd(m)\n    return (m,p)\n\ndef none(dato):\n    if(dato == \'-\'):\n        n= "Ninguna de las anteriores"\n    else:\n        n=dato\n    return n\n\n#///////////////////////////////////////////////////////////////////////////////////////////////#\n#Chanchada\n#///////////////////////////////////////////////////////////////////////////////////////////////#\n\n#Multiple choice de material\ndef mulChoM(esc):\n    lis=[none(esc)]\n    sc = len(db(db.sculpture.id >0 ).select())\n    scu = db(db.sculpture.id >random.randrange(sc-10)).select()\n\n    for i in scu:\n        n= i.material\n        if(len(lis) < 4):\n            n=none(n)\n            if((n != esc) and (existe(lis,n)==False)):\n                lis.append(n)\n    return (lis)\n\n#Multiple choice de material\ndef mulChoT(esc):\n    lis=[none(esc)]\n    sc = len(db(db.sculpture.id >0 ).select())\n    scu = db(db.sculpture.id >random.randrange(sc-10)).select()\n\n    for i in scu:\n        n= i.title\n        if(len(lis) < 4):\n            n=none(n)\n            if((n != esc) and (existe(lis,n)==False)):\n                lis.append(n)\n    return (lis)\n\n#Multiple choice de material\ndef mulChoC(esc):\n    lis=[none(esc)]\n    sc = len(db(db.sculpture.id >0 ).select())\n    scu = db(db.sculpture.id >random.randrange(sc-10)).select()\n\n    for i in scu:\n        n= i.country\n        if(len(lis) < 4):\n            n=none(n)\n            if((n != esc) and (existe(lis,n)==False)):\n                lis.append(n)\n    return (lis)\n\n#Multiple choice de material\ndef mulChoY(esc):\n    lis=[none(esc)]\n    sc = len(db(db.sculpture.id >0 ).select())\n    scu = db(db.sculpture.id >random.randrange(sc-10) ).select()\n\n    for i in scu:\n        n= i.yearCreate\n        if(len(lis) < 4):\n            n=none(n)\n            if((n != esc) and (existe(lis,n)==False)):\n                lis.append(n)\n    return (lis)\n\n#Multiple choice de material\ndef mulChoA(esc):\n    lis=[none(esc)]\n    sc = len(db(db.sculpture.id >0 ).select())\n    scu = db(db.sculpture.id >random.randrange(sc-10) ).select()\n\n    for i in scu:\n        n= i.author\n        if(len(lis) < 4):\n            n=none(n)\n            if((n != esc) and (existe(lis,n)==False)):\n                lis.append(n)\n    return (lis)\nresponse._vars=response._caller(respuesta)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\web2py\\applications\\Chuwal\\controllers/chuGame.py", line 349, in <module>\n  File "C:\\web2py\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\web2py\\applications\\Chuwal\\controllers/chuGame.py", line 91, in respuesta\n    r=correcto(s,d)\n  File "C:\\web2py\\applications\\Chuwal\\controllers/chuGame.py", line 99, in correcto\n    i=db(db.sculpture.id == s).select()\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1435, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'/\'\n'
p11
s.